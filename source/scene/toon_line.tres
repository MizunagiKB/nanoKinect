[gd_resource type="CanvasItemShader" format=1]

[resource]

_code = {
"fragment": "uniform float threshold = 0.25;

vec3 convolve(vec2 uv, float radius, vec3 a, vec3 b, vec3 c) {
    vec3 total = vec3(0,0,0);

    total += texscreen(uv + vec2(-radius, -radius)) * a.x;
    total += texscreen(uv + vec2(0, -radius)) * a.y;
    total += texscreen(uv + vec2(radius, -radius)) * a.z;

    total += texscreen(uv + vec2(-radius, 0)) * b.x;
    total += texscreen(uv + vec2(0, 0)) * b.y;
    total += texscreen(uv + vec2(radius, 0)) * b.z;

    total += texscreen(uv + vec2(-radius, radius)) * c.x;
    total += texscreen(uv + vec2(0, radius)) * c.y;
    total += texscreen(uv + vec2(radius, radius)) * c.z;

    return total / 9;
}

vec3 v = convolve(SCREEN_UV, 0.003, vec3(-1, -2, -1), vec3(0, 0, 0), vec3(1, 2, 1));
vec3 h = convolve(SCREEN_UV, 0.003, vec3(-1, 0, 1), vec3(-2, 0, 2), vec3(-1, 0, 1));

vec3 sobel = vec3(0,0,0);
sobel.r=sqrt(pow(v.r,2)+pow(h.r,2));
sobel.g=sqrt(pow(v.g,2)+pow(h.g,2));
sobel.b=sqrt(pow(v.b,2)+pow(h.b,2));

// convert to grayscale
float l = sobel.r * 0.2 + sobel.g * 0.7 + sobel.b * 0.1;
// threshold
if (l > threshold) {
//    COLOR.rgb = vec3(0,0,0);
    COLOR.rgb = texscreen(SCREEN_UV) * (1.0 - l) * 0.5;
}else{
    COLOR.rgb = texscreen(SCREEN_UV);
}",
"fragment_ofs": 0,
"light": "",
"light_ofs": 0,
"vertex": "",
"vertex_ofs": 0
}

